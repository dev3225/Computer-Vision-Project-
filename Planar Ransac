#importing the libraries

import numpy as np
from matplotlib import pylab as plt
from scipy import io
import random
from scipy.ndimage import gaussian_filter
from skimage.feature import canny
from skimage import filters
from scipy.ndimage import morphology
import skimage

#function to visualise the images using Plotly
def visualize(img, name='', cmap=None):
    #to show the image
    #The Colormap instance or registered colormap name used to map scalar data to colors. This parameter is ignored for RGB(A) data. Defaults to rcParams["image.cmap"] = 'viridis'.
    plt.imshow(img, cmap=cmap)
    #To show the title of the image 
    plt.title(name)
    #To show the plot
    plt.show()

#Function to show the Point-cloud scatter
def vis_scatter(img, name=''):
    
    fig = plt.figure()
    #Adding the subplot of point cloud
    ax = fig.add_subplot(projection='3d')
    #To plot the scatter graph 
    ax.scatter(img[:, :, 0], img[:, :, 1], img[:, :, 2])
    #To show the title of the image 
    plt.title(name)
    #To show the plot
    plt.show()

#Function to apply Gausian Filter
def gauss_canny(image):
    # blur it slightly to remove high frequency noise, and apply edge detection
    #The multidimensional filter is implemented as a sequence of 1-D convolution filters. The intermediate arrays are stored in the same data type as the output. Therefore, for output types with a limited precision, the results may be imprecise because intermediate results may be stored with insufficient precision.
    #sigma= Standard deviation for Gaussian kernel.
    #image = The input array.
    gauss = gaussian_filter(image, sigma=1)

    edged = canny(gauss)
    plt.imshow(edged, cmap='gray')
    plt.show()
    return edged






