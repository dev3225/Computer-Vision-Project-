#importing the libraries

import numpy as np
from matplotlib import pylab as plt
from scipy import io
import random
from scipy.ndimage import gaussian_filter
from skimage.feature import canny
from skimage import filters
from scipy.ndimage import morphology
import skimage

#function to visualise the images using Plotly
def visualize(img, name='', cmap=None):
    #to show the image
    #The Colormap instance or registered colormap name used to map scalar data to colors. This parameter is ignored for RGB(A) data. Defaults to rcParams["image.cmap"] = 'viridis'.
    plt.imshow(img, cmap=cmap)
    #To show the title of the image 
    plt.title(name)
    #To show the plot
    plt.show()

#Function to show the Point-cloud scatter
def vis_scatter(img, name=''):
    
    fig = plt.figure()
    #Adding the subplot of point cloud
    ax = fig.add_subplot(projection='3d')
    #To plot the scatter graph 
    ax.scatter(img[:, :, 0], img[:, :, 1], img[:, :, 2])
    #To show the title of the image 
    plt.title(name)
    #To show the plot
    plt.show()

#Function to apply Gausian Filter
def gauss_canny(image):
    # blur it slightly to remove high frequency noise, and apply edge detection
    #The multidimensional filter is implemented as a sequence of 1-D convolution filters. The intermediate arrays are stored in the same data type as the output. Therefore, for output types with a limited precision, the results may be imprecise because intermediate results may be stored with insufficient precision.
    #sigma= Standard deviation for Gaussian kernel.
    #image = The input array.
    gauss = gaussian_filter(image, sigma=1)
    #https://scikit-image.org/docs/dev/auto_examples/edges/plot_canny.html
    edged = canny(gauss)
    plt.imshow(edged, cmap='gray')
    plt.show()
    return edged

def sob(img):
    # edge detection results are highly sensitive to image noise.
    # One way to get rid of the noise on the image, is by applying Gaussian blur to smooth it.
    gauss = gaussian_filter(img, sigma=1)

    # Edges correspond to a change of pixelsâ€™ intensity. To detect it, the easiest way is to apply filters that
    # highlight this intensity change in both directions: horizontal (x) and vertical (y)
    sob = filters.sobel(gauss)

    tresh = filters.threshold_otsu(sob)
    binary = sob > tresh
    plt.imshow(binary, cmap='gray')
    plt.show()


def estimate_model(data, d_given):
    n = np.linalg.solve(data, [d_given, d_given, d_given])
    return n, d_given


def minimal_sample(data, k):
    n = data.shape[0]
    m = data.shape[1]
    indices_n = [random.randrange(n) for i in range(k)]
    indices_m = [random.randrange(m) for i in range(k)]
    selected = data[np.array(indices_n), np.array(indices_m)]
    return selected


def computeInliers(data, model, treshold):
    n, d = model
    dis = np.abs(n[0] * data[:, :, 0] + n[1] * data[:, :, 1] + n[2] * data[:, :, 2] - d)
    tmp = np.sqrt(n[0] ** 2 + n[1] ** 2 + n[2] ** 2)
    dis /= tmp

    # ignore invalid measurements
    idx = np.where(data[:, :, 2] == 0)
    dis[idx[0][:], idx[1][:]] = treshold
    indizes = np.where(dis[:, :] < treshold)
    # print(np.shape(indizes[0])[0])
    return np.shape(indizes[0])[0], indizes


def ransac(data, treshold, maxIter=1000, d_given=1):
    max_inliers = 0
    best_model = None
    best_inliers = None
    for i in range(maxIter):
        samples = minimal_sample(data, k=3)
        # ignore invalid measurements
        while samples[0][2] == 0 or samples[1][2] == 0 or samples[2][2] == 0:
            samples = minimal_sample(data, k=3)
        model = estimate_model(samples, d_given)
        n_inliers, indices = computeInliers(data, model, treshold)
        if n_inliers > max_inliers:
            best_model = model
            max_inliers = n_inliers
            best_inliers = indices

    return best_model, best_inliers


if __name__ == '__main__':
    # Load the .mat file contents
    mat_contents = io.loadmat('./files/example1kinect.mat')
    mat_sorted = sorted(mat_contents)

    # extract image arrays
    amplitudes = mat_contents[mat_sorted[3]]
    cloud = mat_contents[mat_sorted[4]]
    distances = mat_contents[mat_sorted[5]]

    # visualize images
    visualize(amplitudes, name='Amplitudes', cmap='gray')
    visualize(distances, name='distance image', cmap='turbo')
    # Point Cloud Random subsampling
    # cloud = cloud[::4, ::4]
    vis_scatter(cloud, name='Point Cloud')

    # gauss_canny = gauss_canny(amplitudes)
    # sob(amplitudes)

    model, indizes = ransac(cloud, 0.05, 1000)
    floor_mask = np.zeros((np.shape(cloud)[0], np.shape(cloud)[1]))
    floor_mask[indizes[0][:], indizes[1][:]] = 1
    visualize(floor_mask, "floor", 'seismic')

    opening = morphology.binary_opening(floor_mask)
    filtered_floor_mask = morphology.binary_closing(opening)
    visualize(filtered_floor_mask, "filtered_floor_mask", 'seismic')

    not_floor = np.zeros_like(cloud)
    tmp_not_floor = 1 - floor_mask
    cloud_tmp = np.zeros_like(cloud)
    cloud_tmp[:, :, 0] = tmp_not_floor
    cloud_tmp[:, :, 1] = tmp_not_floor
    cloud_tmp[:, :, 2] = tmp_not_floor
    not_floor[:, :, :] = cloud[:, :, :] * cloud_tmp

    vis_scatter(not_floor, "not_floor")
    model2, indizes2 = ransac(not_floor, 0.001, 1000, d_given=2)
    mask_box = np.zeros((np.shape(cloud)[0], np.shape(cloud)[1]))
    mask_box[indizes2[0][:], indizes2[1][:]] = 1.0
    visualize(mask_box, "mask_box", 'seismic')

    # labels = skimage.measure.label(mask_box, return_num=False)
    # box_top_component = labels == np.argmax(np.bincount(labels.flat))
    # visualize(box_top_component, "box_top_component", 'seismic')

    tmp = np.where(mask_box == 1)
    min_x = np.argmin(tmp[0])
    min_y = np.argmin(tmp[1])
    max_x = np.argmax(tmp[0])
    max_y = np.argmax(tmp[1])

    # print(tmp[1][min_x], tmp[0][min_x])
    # print(tmp[1][max_x], tmp[0][max_x])
    # print(tmp[1][min_y], tmp[0][min_y])
    # print(tmp[1][max_y], tmp[0][max_y])

    plt.imshow(mask_box, cmap='seismic')
    plt.plot(tmp[1][min_x], tmp[0][min_x], 'ro')
    plt.plot(tmp[1][max_x], tmp[0][max_x], 'ro')
    plt.plot(tmp[1][min_y], tmp[0][min_y], 'ro')
    plt.plot(tmp[1][max_y], tmp[0][max_y], 'ro')
    plt.title('corner points')
    plt.show()

    width = np.array([tmp[1][max_x], tmp[0][max_x]]) - np.array([tmp[1][min_y], tmp[0][min_y]])
    length = np.array([tmp[1][min_y], tmp[0][min_y]]) - np.array([tmp[1][min_x], tmp[0][min_x]])
    print(width)
    print(length)
    print('width: ', np.linalg.norm(width))
    print('length: ', np.linalg.norm(length))

    # TODO: I think this calculation is still wrong
    n, d = model
    n2, d2 = model2
    #z1 = -d2 / n2[2]
    #height = np.abs(n[2] * z1 - d) / np.sqrt(n[0] ** 2 + n[1] ** 2 + n[2] ** 2)
    z1 = -d / n[2]
    #height = np.abs(n2[2] * z1 + d) / np.sqrt(n[0] ** 2 + n[1] ** 2 + n[2] ** 2)
    height = np.abs(n2[2] * z1 + d2) / np.sqrt(n2[0] * n2[0] + n2[1] * n2[1] + n2[2] * n2[2])
    print('height: ', height)








